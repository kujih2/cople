<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.market.dao.MarketMapper">
<!-- 장터 글 등록 -->
<insert id="insertMarket" parameterType="marketVO">
INSERT INTO market_product(product_num,product_title,product_seller
						    ,filename0,filename1,
						    filename2,filename3,
						    product_content,product_category,
						    product_price, product_place,
						    product_placedetail 
						    )VALUES(
						    market_product_seq.nextval,
						    #{product_title},#{product_seller},
							#{filename0},#{filename1,jdbcType=VARCHAR},
							#{filename2,jdbcType=VARCHAR}, #{filename3,jdbcType=VARCHAR},
							#{product_content},#{product_category},
							#{product_price},#{product_place,jdbcType=VARCHAR},
							#{product_placeDetail,jdbcType=VARCHAR})
									    
</insert>

<!-- sql 태그와 include 태그를 이용해 SQL문 재사용 -->
	<sql id="marketSearch">
    <where>
        <choose>
            <when test="keyword != null and keyword != '' and category == 0">	
                product_category = 0 AND (product_title LIKE '%' || #{keyword} || '%' OR product_content LIKE '%' || #{keyword} || '%')
            </when>
            <when test="keyword != null and keyword != '' and category == 1">	
                product_category = 1 AND (product_title LIKE '%' || #{keyword} || '%' OR product_content LIKE '%' || #{keyword} || '%')
            </when>
            <when test="keyword == null or keyword == '' and category == 0">
                product_category = 0
            </when>
            <when test="keyword == null or keyword == '' and category == 1">
                product_category = 1
            </when>
        </choose>
    </where>
</sql>
	
	
	<!-- 장터 글의 총개수/검색 개수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT
		  COUNT(*)
		FROM market_product
		<include refid="marketSearch"></include>
	</select>
	
	<!-- 장터 전체 목록/검색목록 -->
	<select id="selectList" parameterType="map" resultType="marketVO">
		SELECT
		   *
		FROM (SELECT
			   	a.*,
			   	rownum rnum
			   FROM (SELECT
			   		product_num,
			   		<![CDATA[
				      REPLACE(REPLACE(product_title,'<','&lt;'),'>','&gt;') product_title,
				    ]]>
			   		product_seller,
			   		filename0,
			   		product_category,
			   		product_price,
			   		product_sale,
			   		product_status,
			   		product_regDate,
			   		product_modifyDate
			   	FROM market_product
			   	<include refid="marketSearch"></include>
			   	ORDER BY product_regDate DESC)a)	
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>       
	</select>
	<!-- 장터 글 상세 조회 -->
	<select id="selectMarketDetail" parameterType="int" resultType="marketVO">
		SELECT * FROM
			market_product
				WHERE product_num = #{prdouct_num}
	</select>
<!-- 장터 글 수정 -->
<update id="updateMarket" parameterType="int">
UPDATE market_product SET  product_title = #{product_title},
						    filename0 = #{filename0},filename1 = #{filename1,jdbcType=VARCHAR},
						    filename2 = #{filename2,jdbcType=VARCHAR},filename3 = #{filename3,jdbcType=VARCHAR},
						    product_content = #{product_content},product_category = #{product_category},
						    product_price = #{product_price}, product_place = #{product_place,jdbcType=VARCHAR},
						    product_placedetail = #{product_placeDetail,jdbcType=VARCHAR},
						    product_modifyDate = SYSDATE 
						    	
				WHERE product_num = ${product_num}
									    
</update>
<!--장터 글 삭제 -->
<delete id="deleteMarket" parameterType="integer">
	DELETE FROM market_product WHERE product_num = #{product_num}
</delete>	
	
	
<!--구매자일 경우 채팅방 유무 조회  -->
<select id="selectChatRoomCheck" parameterType="map" resultType="int">
SELECT count(*) FROM 
			market_chatroom 
			WHERE product_num = #{product_num} AND seller_num = #{seller_num} AND buyer_num = #{mem_num}
</select>
<!-- 채팅방 생성 -->
<insert id="insertChatRoom" parameterType="MarketChatRoomVO">
INSERT INTO market_chatRoom (chatRoom_num,product_num,seller_num,buyer_num)
				VALUES(market_chatRoom_seq.nextVal,#{product_num},#{seller_num},#{buyer_num})
</insert>
<!-- 존재한 채팅방의 번호 조회-->
<select id="selectChatRoom" parameterType="map" resultType="marketChatRoomVO">
SELECT chatroom_num FROM 
			market_chatroom 
			WHERE seller_num = #{seller_num} AND buyer_num = #{mem_num} AND product_num = #{product_num} 
</select>
<!-- 사용자의 전체 채팅방 조회-->
<select id="selectChatRoomList" parameterType="int" resultType="marketChatRoomVO">
SELECT chatroom_num,product_num,product_title,filename0,product_price,seller_num,buyer_num FROM 
			market_chatroom LEFT OUTER JOIN market_product USING(product_num)
			WHERE seller_num = #{mem_num} OR buyer_num = #{mem_num} ORDER BY chatroom_num DESC
</select>
<!-- 선택한 채팅방의 상품 내용 구하기 -->
<select id="selectChatRoomDetail" parameterType="int" resultType="marketChatRoomVO">
SELECT chatroom_num,product_num,product_title,filename0,product_price,seller_num,buyer_num,product_sale FROM 
			market_chatroom LEFT OUTER JOIN market_product USING(product_num)
			WHERE chatroom_num = #{chatRoom_num}
</select>

<!-- 선택한 채팅방의 채팅 내역 구하기 -->
<select id="selectChatDetail" parameterType="integer" resultType="marketChatVO">
SELECT * FROM market_chat WHERE chatRoom_num = #{chatRoom_num} ORDER BY chat_regDate
</select>
<!-- 채팅 내역 읽음 처리 -->
<update id="updateChatRead" parameterType="integer">
	UPDATE market_chat SET chat_readCheck = 0 WHERE chatRoom_num = #{chatRoom_num} AND mem_num != #{mem_num}
</update>
<!-- 채팅 추가 -->
<insert id="insertChat" parameterType="marketChatVO">
  INSERT INTO market_chat(chat_num, chatRoom_num, mem_num, chat_message) 
  VALUES (market_chat_seq.nextval, #{chatRoom_num}, #{mem_num}, #{chat_message})
</insert>
<!-- 구매확정 채팅 추가 -->
<insert id="insertCommitChat" parameterType="marketChatVO">
  INSERT INTO market_chat(chat_num, chatRoom_num, mem_num, chat_message,chat_saleCommit) 
  VALUES (market_chat_seq.nextval, #{chatRoom_num}, #{mem_num}, #{chat_message},#{chat_saleCommit})
</insert>
<!-- 판매상태 바꾸기 (판매중->판매완료) -->
<update id="updateProductSale" parameterType="map">
	UPDATE market_product SET product_sale = 1,product_buyer=#{product_buyer} WHERE product_num = #{product_num}
</update>
<!--채팅내역 삭제 -->
<delete id="deleteChat" parameterType="integer">
	DELETE FROM market_chat WHERE chatroom_num = #{chatRoom_num}
</delete>
<!--채팅방 삭제 -->
<delete id="deleteChatRoom" parameterType="integer">
	DELETE FROM market_chatroom WHERE chatroom_num = #{chatRoom_num}
</delete>
<!-- 삭제할 상품이 포함된 채팅방의 번호 구하기 -->
<select id="selectDeleteChatRoom" parameterType="int" resultType="marketChatRoomVO">
SELECT chatroom_num FROM 
			market_chatroom 
			WHERE product_num = #{product_num}
</select>
<!-- 삭제할 상품이 포함된 채팅방 삭제 -->
<delete id="deleteProductChatRoom" parameterType="int">
	DELETE FROM market_chatroom WHERE product_num = #{product_num}
</delete>
<!-- 마켓프로필 메뉴 조회 -->
<sql id="profileMenu">
    <where>
        <choose>
            <when test="pcategory == 0">	
                product_seller=#{mem_num}
            </when>
            <when test="pcategory == 1">	
                product_seller=#{mem_num} AND product_sale=1
            </when>
            <when test="pcategory == 2">
               product_buyer=#{mem_num}
            </when>
        </choose>
    </where>
 </sql>
 
    <select id="selectProfileProduct" parameterType="map" resultType="marketVO">
    	SELECT * FROM market_product <include refid="profileMenu"></include> ORDER BY product_regdate
    </select>









</mapper>