<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.board.dao.BoardMapper">
	<!-- 게시글 글 등록 -->
	<insert id="insertBoard" parameterType="boardVO">
		INSERT INTO
		commu_board(board_num,title,content,ip,mem_num)
		VALUES (commu_board_seq.nextval, #{title}, #{content}, #{ip}, #{mem_num})
	</insert>
	
	<!-- sql 태그와 include 태그를 이용해 SQL문 재사용 -->
	<sql id="boardSearch">
		<where>
			<if test="keyword != null and keyword != ''">
				title LIKE '%' || #{keyword} || '%' OR
				content LIKE '%' || #{keyword} || '%'
			</if>
		</where>
	</sql>
	
	<sql id="boardOrder">
		<if test="order == 1">
			ORDER BY board_num DESC
		</if>
		<if test="order == 2">
			ORDER BY hit DESC
		</if>
		<if test="order == 3">
			ORDER BY favhate_cnt DESC NULLS LAST
		</if>
		<if test="order == 4">
			ORDER BY re_cnt DESC NULLS LAST
		</if>
	</sql>
	
	<!-- 게시판 글 총개수/검색 개수 -->
	<select id="selectRowCount" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM commu_board JOIN member USING(mem_num)
		<include refid="boardSearch"></include>
	</select>
	
	<!-- 게시판 전체 목록/검색 목록 -->
	<select id="selectList" parameterType="map" resultType="boardVO">
	SELECT 
	   * 
	FROM (SELECT 
	        a.*,
	        rownum rnum 
          FROM(SELECT 
                 board_num,
	             <![CDATA[ 
	             REPLACE(REPLACE(title,'<','&lt;'),'>','&gt;') title, 
	             ]]>
	             hit,
	             reg_date,
	             mem_num,
	             id,
	             nick_name,
	             re_cnt,
	             NVL(favhate_cnt, 0) as favhate_cnt 
              FROM commu_board
              LEFT OUTER JOIN (SELECT COUNT(*) re_cnt, board_num FROM commu_reply GROUP BY board_num) USING(board_num) 
              LEFT OUTER JOIN (SELECT
                                  board_num,
                                  SUM(CASE WHEN fav_status = 1 THEN 1 ELSE 0 END) - 
                                  SUM(CASE WHEN fav_status = 2 THEN 1 ELSE 0 END) favhate_cnt
                               FROM commu_fav
                               GROUP BY board_num) USING(board_num)
              JOIN member USING(mem_num)
        <include refid="boardSearch"></include>
        <include refid="boardOrder"></include>)a)
    <![CDATA[WHERE rnum >= #{start} AND rnum <= #{end}]]>
</select>

	<!-- 글 상세 -->
	<select id="detailBoard" parameterType="integer">
		SELECT * FROM commu_board JOIN member USING(mem_num) 
		LEFT OUTER JOIN member_detail USING(mem_num) 
		WHERE board_num=#{board_num}
	</select>
	
	<!-- 글 수정 -->
	<update id="updateBoard" parameterType="boardVO">
		UPDATE commu_board SET 
		  title=#{title},
		  content=#{content}, 
		  ip=#{ip},
		  modify_date=SYSDATE 
		WHERE board_num=#{board_num}
	</update>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="boardReplyVO">
    INSERT INTO commu_reply (
       re_num,
       re_content,
       re_ip,
       board_num,
       mem_num,
       re_parent_num
    )
    VALUES (
       commu_reply_seq.nextval,
       #{re_content},
       #{re_ip},
       #{board_num},
       #{mem_num},
       <if test="re_parent_num == 0">
           NULL
       </if>
       <if test="re_parent_num != 0">
           #{re_parent_num}
       </if>
    )
</insert>
	
	<!-- 대댓글 등록 -->
	<insert id="insertReplies" parameterType="boardReplyVO">
	INSERT INTO commu_reply (
	   <if test="re_depth != 0">
          re_parent_num,
       </if>
       re_num,
       re_depth,
       re_content,
       re_ip,
       board_num,
       mem_num
    )
    VALUES (
       <if test="re_depth != 0">
           #{re_parent_num},
       </if>
       commu_reply_seq.nextval,
       #{re_depth},
       #{re_content},
       #{re_ip},
       #{board_num},
       #{mem_num})
	</insert>
	
	<!-- 댓글 목록 -->
	<select id="selectListReply" parameterType="map" 
	                                 resultType="boardReplyVO">
		SELECT
		  *
		FROM (SELECT
		        a.*,
		        rownum rnum
		      FROM (SELECT
		      		   re_num,
				       re_parent_num,
				       re_content,
				       re_rdate,
				       re_mdate,
				       re_isdeleted,
				       board_num,
				       mem_num,
				       id,
				       nick_name,
				       auth
				    FROM commu_reply
				    JOIN member USING(mem_num)
				    WHERE board_num=#{board_num})a
			  WHERE re_isdeleted = 0 
			  START WITH re_parent_num IS NULL
			  CONNECT BY PRIOR re_num = re_parent_num
			  ORDER SIBLINGS BY re_num)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>

</mapper>
